// js/three-scene.js

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, 600);
document.getElementById('canvas-container').appendChild(renderer.domElement);

const loader = new THREE.GLTFLoader();
let moon, NASA_Earth, blackhole;

loader.load('assets/glb_models/moon.glb', function (gltf) {
    moon = gltf.scene;
    moon.position.set(0.5, 0, 0); 
    moon.rotation.set(0, 0, 0); 
    moon.scale.set(0.25, 0.5, 0.25);
    scene.add(moon);
}, undefined, console.error);

loader.load('assets/glb_models/NASA_Earth.glb', function (gltf) {
    NASA_Earth = gltf.scene;
    NASA_Earth.position.set(-8, -8, -20); 
    NASA_Earth.rotation.set(0.5, 4.75, 0); 
    NASA_Earth.scale.set(0.025, 0.035, 0.015);
    scene.add(NASA_Earth);
}, undefined, console.error);

const light = new THREE.DirectionalLight(0xffffff, 2);
light.position.set(3, 5, 3).normalize();
scene.add(light);

camera.position.z = 4.0;

function createStars() {
    const starGeometry = new THREE.BufferGeometry();
    const starColors = [];
    const starMaterial = new THREE.PointsMaterial({ vertexColors: true, size: 0.5 });

    const starVertices = [];
    for (let i = 0; i < 1000; i++) {
        const x = (Math.random() - 0.5) * 2000;
        const y = (Math.random() - 0.5) * 2000;
        const z = (Math.random() - 0.5) * 2000;
        starVertices.push(x, y, z);

        const temperature = Math.random();
        const color = new THREE.Color();
        if (temperature < 0.1) color.setHSL(0.05 + temperature * 0.1, 1, 0.5 + temperature * 0.2);
        else if (temperature < 0.2) color.setHSL(0.6 + temperature * 0.2, 1, 0.7 + temperature * 0.15);
        else color.setHSL(0.0, 0.0, 0.9);

        starColors.push(color.r, color.g, color.b);
    }

    starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));
    starGeometry.setAttribute('color', new THREE.Float32BufferAttribute(starColors, 3));

    const stars = new THREE.Points(starGeometry, starMaterial);
    scene.add(stars);
}

createStars();

const animate = function () {
    requestAnimationFrame(animate);
    if (NASA_Earth) NASA_Earth.rotation.y += 0.000025;
    if (moon) moon.rotation.y += 0.00055;
    renderer.render(scene, camera);
};

animate();

window.addEventListener('resize', () => {
    const width = window.innerWidth;
    const height = 600;
    renderer.setSize(width, height);
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
});
